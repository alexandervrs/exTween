<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// @version: 1.0.0

// properties
_ex_tweens = -1;
_ex_tween_classes = -1;
_ex_tween_debug_mode = false;
_suspended = false;

// extension database
enum _ex_tween {
    _name,
    _property,
    _start,
    _end,
    _duration,
    _easing,
    _position,
    _playing,
    _instance,
    _oncomplete,
    _oncomplete_arguments,
    _current,
    _speed,
    _paused,
    _local,
    _sync_delta,
    _length
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update tweens

if (_suspended == true) {
    exit;
}

// count tweens
if (not ds_exists(_ex_tweens, ds_type_grid)) {
    exit;
}

var _ds_height = ds_grid_height(_ex_tweens);
if (_ds_height &lt; 2) {

    if (_ex_tweens[# 0, 0] == "") {
        exit;
    }

}

var _ex_tween_count = ds_grid_height(_ex_tweens);

// loop backwards through tweens and update them
while (--_ex_tween_count &gt;= 0) {

    var _i = _ex_tween_count;
    
    var _name = _ex_tweens[# 0, _i];
    
    var _y = ds_grid_value_y(_ex_tweens, 0, 0, 1, _ds_height, _name);
    if (_y &lt; 0) {
        continue;
    }
    
    // if tween is playing
    if (_ex_tweens[# _ex_tween._playing, _y]) {
        
        var _property    = _ex_tweens[# _ex_tween._property, _y];
        var _value_start = _ex_tweens[# _ex_tween._start,    _y];
        var _value_end   = _ex_tweens[# _ex_tween._end,      _y];
        var _duration    = _ex_tweens[# _ex_tween._duration, _y];
        var _easing      = _ex_tweens[# _ex_tween._easing,   _y];
        var _position    = _ex_tweens[# _ex_tween._position, _y];
        var _speed       = _ex_tweens[# _ex_tween._speed,    _y];
        var _instance    = _ex_tweens[# _ex_tween._instance, _y];
        var _value       = _ex_tweens[# _ex_tween._current,  _y];
        var _sync        = _ex_tweens[# _ex_tween._sync_delta, _y];
        var _delta       = 1.0;
        
        if (_sync == true) {
            _delta = (delta_time / (1000000 / room_speed));
            _speed *= _delta;
        }
        
        if (_speed &gt;= _duration) { 
            _position = _duration;
        } else {
            _position += _speed;
        }
        
        if (_easing == -1) {
            _value = lerp(_value_start, _value_end, ex_tween_math_smoothstep(0, 1, _position / _duration));
        } else {
            _value = lerp(_value_start, _value_end, script_execute(_easing, _position, 0, clamp(_position * _duration, 0, 1), _duration));
        }
        
        // update current value
        _ex_tweens[# _ex_tween._current, _y] = _value;
        
        var _tproperty = _property;
        
        with (_instance) {
            script_execute(_tproperty, _value);
        }
        
        // set position
        _ex_tweens[# _ex_tween._position, _y] = _position;
        
        if (_position &gt;= _duration) {
        
            with (_instance) {
                script_execute(_tproperty, _value_end);
            }
            
            _position = 0;
            _ex_tweens[# _ex_tween._playing, _y] = false;
            _ex_tweens[# _ex_tween._current, _y] = _value_end;
            
            if (ex_tween_get_debug_mode()) {
                show_debug_message('exTween: Tween "'+_name+'" ended');
            }
            
            // get script
            var _script = _ex_tweens[# _ex_tween._oncomplete, _y];
            
            if (_script &gt; -1) {
                
                var _script_args = _ex_tweens[# _ex_tween._oncomplete_arguments, _y];
                
                if (is_real(_script_args) or is_string(_script_args)) {
                    
                    if (_script_args == ex_tween_arguments_undefined) {
                        script_execute(_script);
                    } else {
                        script_execute(_script, _script_args);
                    }
                
                } else if (is_array(_script_args)) {
                    
                    var _length = array_length_1d(_script_args);
                    
                    switch (_length) {
                        case 0: script_execute(_script); break;
                        case 1: script_execute(_script, _script_args[0]); break;
                        case 2: script_execute(_script, _script_args[0], _script_args[1]); break;
                        case 3: script_execute(_script, _script_args[0], _script_args[1], _script_args[2]); break;
                        case 4: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3]); break;
                        case 5: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4]); break;
                        case 6: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5]); break;
                        case 7: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6]); break;
                        case 8: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6], _script_args[7]); break;
                        case 9: script_execute(_script, _script_args[0], _script_args[1], _script_args[2], _script_args[3], _script_args[4], _script_args[5], _script_args[6], _script_args[7], _script_args[8]); break;
                        // ...
                        default: 
                            if (ex_tween_get_debug_mode()) {
                                show_debug_message('exTween: Error in tween with name: "'+string( _name )+'", onComplete script to trigger has too few (less than 0) or too many arguments (max 9 [0-8] allowed)');
                            }
                            break;
                    }
                
                } else {
                    
                    script_execute(_script);
                }
                
            }
            /* */
            
            // auto-delete if local tween
            var _is_local = _ex_tweens[# _ex_tween._local, _y];
            
            if (_is_local == 1) {
                ex_tween_destroy(_name);
                if (ex_tween_get_debug_mode()) {
                    show_debug_message('exTween: Tween "'+_name+'" is local, auto-removed');
                }
            }
            
            continue;
            
        }
        
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup local tweens

var _tween_name;
var _i = ex_tween_count();

if (_i &lt;= 0) {
    if (ex_tween_get_debug_mode()) {
        show_debug_message('exTween: No local tweens present to cleanup'); 
    }
    exit;
}

if (ex_tween_get_debug_mode()) {
    show_debug_message('exTween: Started cleaning up local tweens...');
}

var _local_tweens = 0;
while (_i--) {
    
    var _local = _ex_tweens[# _ex_tween._local, _i];
    var _name  = _ex_tweens[# _ex_tween._name, _i];
    
    if (_local == true) {
        
        ex_tween_ds_grid_delete_y(_ex_tweens, _i, true);
        
        if (ex_tween_get_debug_mode()) {
            show_debug_message("exTween: Removed local tween: "+string(_name));
        }
        _local_tweens += 1;
        
    }

}

if (ex_tween_get_debug_mode()) {
    show_debug_message('exTween: Finished cleaning up local tweens, total removed: '+string(_local_tweens));
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
